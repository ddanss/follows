{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["clientId","getUserByName","name","a","fetch","method","headers","r","json","getFollowingById","user_id","document","offset","populatePage","users","logo","getElementById","innerHTML","userName","display_name","populateFollows","userId","then","elem","i","follows","length","e","fDate","Date","created_at","resp","channel","line","getFullYear","getMonth","getDate","_id","startFind","value","currentName","d","App","addEventListener","event","keyCode","className","class","type","id","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mPAEMA,G,MAAW,kCAGXC,EAAa,uCAAG,WAAgBC,GAAhB,eAAAC,EAAA,sEACJC,MAAM,4CAA8CF,EAAM,CACxEG,OAAQ,MACRC,QAAS,CACP,YAAaN,EACb,OAAU,sCALM,cACdO,EADc,yBAQbA,EAAEC,QARW,2CAAH,sDAWbC,EAAgB,uCAAG,WAAgBC,GAAhB,eAAAP,EAAA,sEACPC,MAAM,sCAAwCM,EAAxC,sCAAuGC,SAASC,OAAQ,CAC5IP,OAAQ,MACRC,QAAS,CACP,YAAaN,EACb,OAAU,sCALS,cACjBO,EADiB,yBAQhBA,EAAEC,QARc,2CAAH,sDA+BhBK,EAAe,SAAUN,GACzBA,EAAEO,MAAM,GAAGC,OACAJ,SAASK,eAAe,SAChCC,WAAa,aAAeV,EAAEO,MAAM,GAAGC,KAAO,QAErD,IAAMG,EAAWX,EAAEO,MAAM,GAAGK,cAzBN,SAAlBC,EAA4Bb,EAAGc,EAAQH,GAC3CT,EAAiBY,GAAQC,MAAK,SAAAf,GAE5B,IADA,IAAMgB,EAAOZ,SAASK,eAAe,QAC5BQ,EAAI,EAAGA,EAAIjB,EAAEkB,QAAQC,OAAQF,IAAK,CACzC,IAAMG,EAAIpB,EAAEkB,QAAQD,GACdI,EAAQ,IAAIC,KAAKF,EAAEG,YACnBC,EAAOxB,EAAEkB,QAAQD,GAAGQ,QACtBC,EAAO,QACXA,GAAQ,kCAAoCF,EAAK7B,KAAO,qBAAuB6B,EAAKZ,aAAe,OACnGc,GAAQ,MAAQL,EAAMM,cAAgB,KAAON,EAAMO,WAAa,GAAK,IAAMP,EAAMQ,UAAY,IAC7FH,GAAQ,SACRV,EAAKN,WAAagB,EAEhB1B,EAAEkB,QAAQC,OAAS,IACrBf,SAASC,QAtCE,IAuCXQ,EAAgBb,EAAGc,EAAQH,OAY/BE,CAAgBb,EADDA,EAAEO,MAAM,GAAGuB,IACCnB,IAGvBoB,EAAS,uCAAG,8BAAAnC,EAAA,6DAChBQ,SAASK,eAAe,SAASC,UAAY,GAC7CN,SAASK,eAAe,QAAQC,UAAY,GAEtCf,EAAOS,SAASK,eAAe,QAAQuB,MAC7C5B,SAASC,OAAS,EAClBD,SAAS6B,YAActC,EANP,SAOAD,EAAcC,GAPd,QAOVuC,EAPU,SAQPA,EAAE3B,OAAS2B,EAAE3B,MAAMY,OAAS,EACnCb,EAAa4B,GAEb9B,SAASK,eAAe,SAASC,UAAY,gEAX/B,2CAAH,qDA8CAyB,E,kLA7BX/B,SAASC,OAAS,EAClBD,SAAS6B,YAAc,aACvBvC,EAAc,cAAcqB,KAAKT,GAEjCF,SAASK,eAAe,QAAQ2B,iBAAiB,SAAS,SAAUC,GAC5C,KAAlBA,EAAMC,SACRP,OAIJ3B,SAASK,eAAe,cAAc2B,iBAAiB,SAAS,WAC9DL,S,+BAMF,OACE,yBAAKQ,UAAU,MAAMC,MAAM,aACzB,yBAAKA,MAAM,SAAX,uBACO,2BAAOC,KAAK,OAAOC,GAAG,OAAOC,YAAY,eAC9C,2BAAOD,GAAG,aAAaD,KAAK,SAAST,MAAM,kBAE7C,yBAAKU,GAAG,QAAQF,MAAM,UACtB,yBAAKE,GAAG,c,GA1BEE,IAAMC,WC5DJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASK,eAAe,SDyHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bab97566.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nconst clientId = 'o9ai1orr9lfs2r17tnwgz4hm6i5j6z';\nconst pageSize = 100;\n\nconst getUserByName = async function (name) {\n  const r = await fetch('https://api.twitch.tv/kraken/users?login=' + name, {\n    method: 'GET',\n    headers: {\n      'Client-ID': clientId,\n      'Accept': 'application/vnd.twitchtv.v5+json'\n    }\n  });\n  return r.json();\n}\n\nconst getFollowingById = async function (user_id) {\n  const r = await fetch('https://api.twitch.tv/kraken/users/' + user_id + '/follows/channels?limit=' + pageSize + '&offset=' + document.offset, {\n    method: 'GET',\n    headers: {\n      'Client-ID': clientId,\n      'Accept': 'application/vnd.twitchtv.v5+json'\n    }\n  })\n  return r.json();\n}\n\nconst populateFollows = function (r, userId, userName) {\n  getFollowingById(userId).then(r => {\n    const elem = document.getElementById('cont');\n    for (var i = 0; i < r.follows.length; i++) {\n      const e = r.follows[i];\n      const fDate = new Date(e.created_at);\n      const resp = r.follows[i].channel;\n      var line = '<div>'\n      line += '<a href=\"https://www.twitch.tv/' + resp.name + '\" target=\"_blank\">' + resp.display_name + '</a>';\n      line += '\\t(' + fDate.getFullYear() + '/' + (fDate.getMonth() + 1) + '/' + fDate.getDate() + ')';\n      line += '</div>';\n      elem.innerHTML += line;\n    }\n    if (r.follows.length > 0) {\n      document.offset += pageSize;\n      populateFollows(r, userId, userName)\n    }\n  });\n}\n\nconst populatePage = function (r) {\n  if (r.users[0].logo) {\n    const elem = document.getElementById('title');\n    elem.innerHTML += '<img src=\"' + r.users[0].logo + '\" />'\n  }\n  const userName = r.users[0].display_name;\n  const userId = r.users[0]._id;\n  populateFollows(r, userId, userName);\n}\n\nconst startFind = async function () {\n  document.getElementById('title').innerHTML = '';\n  document.getElementById('cont').innerHTML = '';\n\n  const name = document.getElementById('name').value;\n  document.offset = 0;\n  document.currentName = name;\n  const d = await getUserByName(name);\n  if (d && d.users && d.users.length > 0) {\n    populatePage(d)\n  } else {\n    document.getElementById('title').innerHTML = '<div>체크 아이디 플리즈</div>';\n  }\n}\n\nclass App extends React.Component {\n  componentDidMount() {\n    document.offset = 0;\n    document.currentName = 'heehee1004';\n    getUserByName('heehee1004').then(populatePage);\n\n    document.getElementById(\"name\").addEventListener('keyup', function (event) {\n      if (event.keyCode === 13) {\n        startFind();\n      }\n    });\n\n    document.getElementById('findButton').addEventListener('click', function() {\n      startFind();\n    })\n  }\n  \n  render() {\n    \n    return (\n      <div className=\"App\" class=\"container\">\n        <div class=\"input\">\n          아이디: <input type=\"text\" id=\"name\" placeholder=\"heehee1004\"  />\n          <input id=\"findButton\" type=\"button\" value=\"고고\" />\n        </div>\n        <div id='title' class=\"title\" />\n        <div id='cont' />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}